<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-06T12:58:03+01:00</updated><id>http://localhost:4000/</id><title type="html">Laurent Curau</title><subtitle>Laurent Curau's blog</subtitle><entry><title type="html">Java Streams</title><link href="http://localhost:4000/java-streams/" rel="alternate" type="text/html" title="Java Streams" /><published>2018-05-08T10:51:42+01:00</published><updated>2018-05-08T10:51:42+01:00</updated><id>http://localhost:4000/java-streams</id><content type="html" xml:base="http://localhost:4000/java-streams/">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sir Charles Antony Richard Hoare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The habitual Java way, with array indexes:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The habitual Java way, without indexes:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;With streams (Java 8 onwards):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simple, clear, and brief. We don’t mess around with mutable variables, iteration is abstracted away, and it’s easier to understand and maintain.&lt;/p&gt;

&lt;p&gt;The secret sauce there is &lt;code class=&quot;highlighter-rouge&quot;&gt;stream()&lt;/code&gt; and the lambda expression (here &lt;code class=&quot;highlighter-rouge&quot;&gt;number -&amp;gt; number * 2&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stream()&lt;/code&gt; turns an array into an iterable collection, the lambda expression is applied to each member of the collection, and the result is accumulated into a new collection.&lt;/p&gt;

&lt;p&gt;A lambda expression is an anonymous function that gets created just in time. On the left of &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; is a list of parameters, and on the right is the function’s body.&lt;/p&gt;

&lt;p&gt;When we pass a lambda expression to a method, the compiler converts the lambda expression to an instance of the appropriate functional interface. A functional interface is an interface that contains one and only one abstract method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wanted dead or alive: the for loop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After reading about streams, I was understandably excited, and so I decided to go on a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop hunt inside my Java Tic Tac Toe application.&lt;/p&gt;

&lt;p&gt;Here’s a nice trophy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nicer (I did actually start with this)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Even nicer (thanks, IntelliJ)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Line:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasWin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how we can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;line -&amp;gt; line.hasWin()&lt;/code&gt; with method reference: &lt;code class=&quot;highlighter-rouge&quot;&gt;Line::hasWin&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.</summary></entry><entry><title type="html">Array vs. ArrayList in Java</title><link href="http://localhost:4000/array-vs-arraylist-in-java/" rel="alternate" type="text/html" title="Array vs. ArrayList in Java" /><published>2018-05-08T10:51:42+01:00</published><updated>2018-05-08T10:51:42+01:00</updated><id>http://localhost:4000/array-vs-arraylist-in-java</id><content type="html" xml:base="http://localhost:4000/array-vs-arraylist-in-java/">&lt;p&gt;I started working on my Java TicTacToe application this week. When it came to picking a data structure for my board, I reached for &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;. But then I discovered Java also had &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What are the differences between &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; in Java? Why use one over the other?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main differences&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; is a fixed length data structure, ArrayList is variable length. Once created, you can’t change an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;’s size. &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; can be resized dynamically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayList cannot hold primitives, it can only hold objects. Array can hold both primitives and objects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;A note on boxing and unboxing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boxing&lt;/strong&gt;: wrapping a primitive into a class (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;), after which it becomes a boxed primitive.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Integer.valueOf(1);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unboxing&lt;/strong&gt;: converting a wrapped primitive into a primitive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java&amp;gt; Integer wrappedInt = 1;
=&amp;gt; java.lang.Integer wrappedInt = 1
java&amp;gt; wrappedInt.intValue();
=&amp;gt; java.lang.Integer res1 = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Autoboxing&lt;/strong&gt;: automatically convert from a primitive to an object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; intList = new ArrayList&amp;lt;Integer&amp;gt;();
intList.add(1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, autoboxing converted our &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; primitive into an object before adding it to the ArrayList. We didn’t actually store a primitive.&lt;/p&gt;</content><author><name></name></author><summary type="html">I started working on my Java TicTacToe application this week. When it came to picking a data structure for my board, I reached for Array. But then I discovered Java also had ArrayList.</summary></entry><entry><title type="html">Hello Java</title><link href="http://localhost:4000/hello-java/" rel="alternate" type="text/html" title="Hello Java" /><published>2018-05-02T10:51:42+01:00</published><updated>2018-05-02T10:51:42+01:00</updated><id>http://localhost:4000/hello-java</id><content type="html" xml:base="http://localhost:4000/hello-java/">&lt;p&gt;Today, I am writing my first Java app ever. In line with &lt;a href=&quot;https://8thlight.com/&quot;&gt;8th Light&lt;/a&gt; tradition, it will be a game of Tic Tac Toe.&lt;/p&gt;

&lt;p&gt;But first, let’s get a &lt;em&gt;Hello World&lt;/em&gt; application going.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Work through the &lt;a href=&quot;https://github.com/matyb/java-koans&quot;&gt;Java koans&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create a new Java application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Install Gradle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gradle is (mostly) a task runner and a dependency management tool. It can also be daemonised to run your test suite and the compiler continuously in the background. It will only run the compiler for the code that has changed since the previous compilation.&lt;/p&gt;

&lt;p&gt;Here’s a few things Gradle can do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create the directory structure for a new application (&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle init&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;run your application (&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle run&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;run the unit tests and the linter (&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle check&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;run the unit tests continuously (&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle test --continuous&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;create and run tasks, a task being any basic operation&lt;/li&gt;
  &lt;li&gt;manage dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install on Mac OS X using &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, run &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install gradle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s check the installation was successful:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gradle &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
Gradle 4.7
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;

Build &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;:   2018-04-18 09:09:12 UTC
Revision:     b9a962bf70638332300e7f810689cb2febbd4a6c

Groovy:       2.4.12
Ant:          Apache Ant&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; version 1.9.9 compiled on February 2 2017
JVM:          10.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Oracle Corporation&quot;&lt;/span&gt; 10.0.1+10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
OS:           Mac OS X 10.13.4 x86_64

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sweet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install IntelliJ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was recommended IntelliJ as an integrated development environment for developing in Java, so IntelliJ it is. Other popular choices are NetBeans and Eclipse. Let’s download &lt;a href=&quot;https://www.jetbrains.com/idea/download&quot;&gt;IntelliJ&lt;/a&gt; and install it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a new application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s create a new folder for our application.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir TicTacToe &amp;amp;&amp;amp; cd TicTacToe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want to create a new command line application. A quick look at the Gradle docs tells me I should run &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle init&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--type java-application&lt;/code&gt; flag. This flag tells gradle to give me an application with JUnit for testing, directories in the conventional locations for source code.&lt;/p&gt;

&lt;p&gt;Because there are no existing classes in my application, Gradle generates a sample class and a matching test.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/main/java/App.java&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/test/java/AppTest.java&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testAppHasAGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classUnderTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app should have a greeting&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classUnderTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGreeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s ask IntelliJ to run our app, and we get back:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello world.

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hello Java!&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I am writing my first Java app ever. In line with 8th Light tradition, it will be a game of Tic Tac Toe.</summary></entry><entry><title type="html">Global Day of Code Retreat</title><link href="http://localhost:4000/global-day-code-retreat-2014/" rel="alternate" type="text/html" title="Global Day of Code Retreat" /><published>2014-11-18T09:51:42+00:00</published><updated>2014-11-18T09:51:42+00:00</updated><id>http://localhost:4000/global-day-code-retreat-2014</id><content type="html" xml:base="http://localhost:4000/global-day-code-retreat-2014/">&lt;p&gt;Last Saturday was my first &lt;a href=&quot;http://gdcr.coderetreat.org/&quot;&gt;Global Day of Code Retreat&lt;/a&gt;. Code Retreat is an event where software engineers meet to for a day to practice their craft by attempting to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;, in four or five 40-minute sessions.&lt;/p&gt;

&lt;p&gt;After each iteration, the code is deleted and new pairs are formed. Each iteration comes with its own constraint.&lt;/p&gt;

&lt;p&gt;Our constraints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No primitives.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Desired effect: object-orientated code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Test-Driven Development as if you meant it&lt;/strong&gt;, i.e. start with the smallest unit of certainty and wait for patterns to emerge to extract them into concepts, with objects and methods.&lt;/p&gt;

    &lt;p&gt;Desired effect: minimalistic code and the fewest abstractions as possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Methods can have no return value.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Desired effect: Use of the observer pattern. Tell, don’t ask.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pairing … in silence&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Desired effect: write methods in a way that reveals our intentions. Side-effect: ridiculously long method and variable names.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event is designed to put emphasis on the process rather than on the solution. In that way, it is like katas in martial arts. No one is expected to succeed in writing the entire solution in 40 minutes.&lt;/p&gt;

&lt;p&gt;The Code Retreat provided us with a safe place to try out new things, learn and be creative.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href=&quot;https://twitter.com/ecomba&quot;&gt;Enrique&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/MakisOtman&quot;&gt;Makis&lt;/a&gt; for organising this great event.&lt;/p&gt;</content><author><name></name></author><summary type="html">Last Saturday was my first Global Day of Code Retreat. Code Retreat is an event where software engineers meet to for a day to practice their craft by attempting to create Conway’s Game of Life, in four or five 40-minute sessions.</summary></entry><entry><title type="html">The magic tricks of testing</title><link href="http://localhost:4000/the-magic-tricks-of-testing/" rel="alternate" type="text/html" title="The magic tricks of testing" /><published>2014-11-17T09:51:42+00:00</published><updated>2014-11-17T09:51:42+00:00</updated><id>http://localhost:4000/the-magic-tricks-of-testing</id><content type="html" xml:base="http://localhost:4000/the-magic-tricks-of-testing/">&lt;p&gt;Sandi Metz gave a talk titled &lt;a href=&quot;https://www.youtube.com/watch?v=URSWYvyc42M&quot;&gt;The Magic Tricks of Testing&lt;/a&gt; at Rails Conf 2013. She tells us about &lt;strong&gt;what&lt;/strong&gt; should be tested and &lt;strong&gt;whose responsibility&lt;/strong&gt; it is to do so. Here are my takeaways.&lt;/p&gt;

&lt;p&gt;We want a unit test to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;thorough&lt;/li&gt;
  &lt;li&gt;stable&lt;/li&gt;
  &lt;li&gt;fast&lt;/li&gt;
  &lt;li&gt;few&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;focus-on-messages&quot;&gt;Focus on messages&lt;/h3&gt;

&lt;p&gt;There are three types of messages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;incoming (receives from others)&lt;/li&gt;
  &lt;li&gt;sent to self (the object sends to itself)&lt;/li&gt;
  &lt;li&gt;outgoing (sends messages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These messages come in two flavours: they can be queries or commands.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;query message&lt;/strong&gt; returns something and changes nothing.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;command returns&lt;/strong&gt; nothing and changes something.&lt;/p&gt;

&lt;p&gt;The problem is, we conflate commands and queries. (e.g. pop method). It is not evil per se to mix command and query methods, but they get tested differently.&lt;/p&gt;

&lt;h5 id=&quot;incoming-query-messages&quot;&gt;Incoming query messages&lt;/h5&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wheel&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tire&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ..&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diameter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The diameter method is an incoming query.&lt;/p&gt;

&lt;p&gt;This is how it is tested:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WheelTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiniTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_calculates_diameter&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wheel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wheel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;26.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wheel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;diameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;: Test incoming query messages by making &lt;em&gt;assertions&lt;/em&gt; about &lt;em&gt;what they send back&lt;/em&gt; (i.e. their state).&lt;/p&gt;

&lt;p&gt;We don’t care about how it’s done. We care only about the message that is sent back. We test only the interface, not the implementation. That means we can change the implementation without breaking the tests.&lt;/p&gt;

&lt;h4 id=&quot;incoming-command-messages&quot;&gt;Incoming command messages&lt;/h4&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gear&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chainring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:wheel&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_cog&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@cog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cog&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;set_cog&lt;/code&gt; method is a combination of a query and a command.&lt;/p&gt;

&lt;p&gt;It returns a value - that’s the query part - that gets set on the &lt;code class=&quot;highlighter-rouge&quot;&gt;@cog&lt;/code&gt; instance variable - that’s the command part.&lt;/p&gt;

&lt;p&gt;We test only the command:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GearTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiniTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_set_cog&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_cog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;: Test incoming command messages by making &lt;strong&gt;assertions&lt;/strong&gt; about &lt;strong&gt;direct public side effects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The receiver of the incoming message has sole responsibility making assertions about its value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;: &lt;strong&gt;Do not test private methods&lt;/strong&gt;. Do not make assertions about their result. Do not expect to send them.&lt;/p&gt;

&lt;p&gt;Writing tests for private methods binds us to a specific implementation and make it impossible to refactor without breaking the tests.&lt;/p&gt;

&lt;p&gt;It’s an overspecification that adds costs, and absolutely no value.&lt;/p&gt;

&lt;h4 id=&quot;outgoing-query-message&quot;&gt;Outgoing query message&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;: Do not test outgoing query messages.&lt;/p&gt;

&lt;p&gt;Do not make assertions about their result. Do not expect to send them.&lt;/p&gt;

&lt;p&gt;If a sent message has no visible side-effect, then the sender should &lt;strong&gt;not&lt;/strong&gt; test it.&lt;/p&gt;

&lt;h4 id=&quot;outgoing-command-message&quot;&gt;Outgoing command message&lt;/h4&gt;

&lt;p&gt;Test outgoing command messages by setting expectations on them, expecting that you send them.&lt;/p&gt;

&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sandi_metz_unit_test_matrix.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Underlying principles:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be a minimalist&lt;/li&gt;
  &lt;li&gt;Use good judgement&lt;/li&gt;
  &lt;li&gt;Test everything once&lt;/li&gt;
  &lt;li&gt;Test the interface&lt;/li&gt;
  &lt;li&gt;Trust collaborators&lt;/li&gt;
  &lt;li&gt;Insist on simplicity&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Sandi Metz gave a talk titled The Magic Tricks of Testing at Rails Conf 2013. She tells us about what should be tested and whose responsibility it is to do so. Here are my takeaways.</summary></entry><entry><title type="html">Coaching at Codebar</title><link href="http://localhost:4000/coaching-codebar/" rel="alternate" type="text/html" title="Coaching at Codebar" /><published>2014-10-30T09:51:42+00:00</published><updated>2014-10-30T09:51:42+00:00</updated><id>http://localhost:4000/coaching-codebar</id><content type="html" xml:base="http://localhost:4000/coaching-codebar/">&lt;p&gt;Yesterday was my first day coaching at &lt;a href=&quot;http://www.codebar.io&quot;&gt;Codebar&lt;/a&gt;. Despo Pentara posted a tweet in the afternoon that they were short of a coaches due to unusually high number of students, and I have always enjoyed teaching, so I jumped in without hesitation. It’s also the best way to learn and uncover the gaps in my knowledge.&lt;/p&gt;

&lt;p&gt;I coached Laura and Charlotte. Laura is a young web designer who wants to learn more about JavaScript so she can make her websites more interactive. Charlotte is a middle-aged woman, and coding is her hobby.&lt;/p&gt;

&lt;p&gt;For 3 hours solid, Laura and Charlotte buckled down and went through the second part of Codebar’s JavaScript tutorial. They are so smart and focused, it was a real pleasure to pair program with them.&lt;/p&gt;

&lt;p&gt;Here are couple of things I learnt about pairing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Never touch the driver’s computer. It undermines confidence.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid giving away the solution directly. Instead, act as a rubber duck, and ask the right questions so your pair can find the solution by himself. That builds self-confidence.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next week: jQuery. Bring on the syntactic sugar!&lt;/p&gt;</content><author><name></name></author><summary type="html">Yesterday was my first day coaching at Codebar. Despo Pentara posted a tweet in the afternoon that they were short of a coaches due to unusually high number of students, and I have always enjoyed teaching, so I jumped in without hesitation. It’s also the best way to learn and uncover the gaps in my knowledge.</summary></entry><entry><title type="html">Software Craftsmanship</title><link href="http://localhost:4000/software-craftsmanship/" rel="alternate" type="text/html" title="Software Craftsmanship" /><published>2014-09-22T10:51:42+01:00</published><updated>2014-09-22T10:51:42+01:00</updated><id>http://localhost:4000/software-craftsmanship</id><content type="html" xml:base="http://localhost:4000/software-craftsmanship/">&lt;p&gt;The philosophy of Software Craftsmanship really speaks to my core values, and I know I want to become a craftsman and work with people who follow that ethos. The journey is long and difficult, but it will do anything it takes to become true craftsman.&lt;/p&gt;

&lt;p&gt;I first heard about the software craftsmanship ethos two years ago, when I read &lt;em&gt;Getting Real: The smarter, faster, easier way to build a successful web application&lt;/em&gt;, by Jason Fried and David Heinemeier Hanson, and &lt;em&gt;The Pragmatic Programmer&lt;/em&gt;, by Andy Hunt.&lt;/p&gt;

&lt;p&gt;But what is Software Craftsmanship exactly? Here is a definition I like. In Sandro Mancuso’s words, in &lt;a href=&quot;https://leanpub.com/socra&quot;&gt;Software Craftsmanship: Professionalism Pragmatism Pride&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Software craftsmanship is a long journey to mastery. It’s a lifestyle where developers choose to be responsible for their own careers and for improving their craft, constantly learning new tools and techniques. Software Craftsmanship is all about putting responsibility, professionalism, pragmatism and pride back into software development.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How I see it, it’s the &lt;em&gt;Do what you love, love what you do, and do it well&lt;/em&gt; ethos applied to software development. Or as the &lt;a href=&quot;http://manifesto.softwarecraftsmanship.org/&quot;&gt;Software Craftsmanship Manifesto&lt;/a&gt; states it: &lt;em&gt;“Not only working software, but also well-crafted software.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I consistently attend the hands-on sessions of the &lt;a href=&quot;http://www.meetup.com/london-software-craftsmanship/&quot;&gt;London Software Craftsmanship Community&lt;/a&gt; (LSCC). Each session has a theme - e.g. Outside-in development with Behaviour-Driven Development - and participants pair program to solve the challenge of the day.&lt;/p&gt;

&lt;p&gt;It was my first experience of pair-programming. I remember pairing with Pawel Duda and learning more about using dependency injection and duck-typing to avoid coupling. On his recommendation, I read Sandi Metz’s &lt;em&gt;Practical Object-Oriented Design in Ruby&lt;/em&gt; (aka POODR).&lt;/p&gt;

&lt;p&gt;Now the best way forward for me is to get hired as an apprentice at a company that follows the ethos of software craftmanship.&lt;/p&gt;</content><author><name></name></author><summary type="html">The philosophy of Software Craftsmanship really speaks to my core values, and I know I want to become a craftsman and work with people who follow that ethos. The journey is long and difficult, but it will do anything it takes to become true craftsman.</summary></entry><entry><title type="html">Product development with Ryan Singer of 37signals</title><link href="http://localhost:4000/product-development-with-ryan-singer-of-37signals/" rel="alternate" type="text/html" title="Product development with Ryan Singer of 37signals" /><published>2013-11-21T09:51:42+00:00</published><updated>2013-11-21T09:51:42+00:00</updated><id>http://localhost:4000/product-development-with-ryan-singer-of-37signals</id><content type="html" xml:base="http://localhost:4000/product-development-with-ryan-singer-of-37signals/">&lt;p&gt;Ryan Singer of 37signals came to Starter School to talk to us about how to think about design and product development.&lt;/p&gt;

&lt;p&gt;Here are a few takeaways.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;fr&quot;&gt;&lt;p&gt;.&lt;a href=&quot;https://twitter.com/rjs&quot;&gt;@rjs&lt;/a&gt; dropping product design knowledge on &lt;a href=&quot;https://twitter.com/starterschool&quot;&gt;@starterschool&lt;/a&gt; students this afternoon &lt;a href=&quot;http://t.co/D78mSydTTJ&quot;&gt;pic.twitter.com/D78mSydTTJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; The Starter League (@starterleague) &lt;a href=&quot;https://twitter.com/starterleague/statuses/403651941479112704&quot;&gt;21 Novembre 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2&gt;Design is an organic process&lt;/h2&gt;

&lt;p&gt;From the center outward. From the epicenter to the periphery.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ryan-singer-epicenter.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&quot;Designing a product is like building a city. You cannot start by building the first floor of every building of the city, then the second, and so on. You want to get one building right, and go on from there.&quot;&lt;/blockquote&gt;&lt;/p&gt;

&lt;h2&gt;Don't leave your visitor guessing. Avoid surprises&lt;/h2&gt;

&lt;p&gt;Show your customer the process he is supposed to go through. Let him see the entire process before he embarks on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ryan-singer-tunnel.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The visitor must know at a glance what you expect him to do. You must also give him a heads up how many steps there are in the process. That way, he can estimate if it's worth his time and effort, and he can be sure there are no surprises along the way.&lt;/p&gt;

&lt;h2&gt;Three types of features&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Must have (breaks on a car, wings on a plane, etc.)&lt;/li&gt;
  &lt;li&gt;Performance (enhance)&lt;/li&gt;
  &lt;li&gt;Delight (&lt;em&gt;oh, nice!&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Everything must be here for a reason&lt;/h2&gt;

&lt;p&gt;Each element of our apps must have a good answer to the following questions: who is it for? why is it important for my customer? why does he care?&lt;/p&gt;

&lt;h2&gt;Break free of the grid if you must&lt;/h2&gt;

&lt;p&gt;It seems all web designers these days swear by grid design. It creates order and harmony. It’s easy on the eye.&lt;/p&gt;

&lt;p&gt;But what if adding a critical link or button somewhere on the page breaks the grid. Should you leave it out? Or break out of the grid?&lt;/p&gt;

&lt;p&gt;If that button is really important, if it adds more value to the customer than it takes away, then feel free to break out of the grid. It’s a trade-off. If it’s worth it, do it.&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&quot;Never let your decisions be dictated by the grid.&quot; -Ryan Singer.&lt;/blockquote&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Recommended by Ryan Singer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[Video] &lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot; target=&quot;_blank&quot;&gt;Simple Made Easy, a talk by Richard Hickey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[Book] &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot; target=&quot;_blank&quot;&gt;Domain-Driven Design&lt;/a&gt;, by Eric Evans&lt;/li&gt;
  &lt;li&gt;[Book] &lt;a href=&quot;http://www.amazon.com/Notes-Synthesis-Form-Harvard-Paperbacks/dp/0674627512/&quot; target=&quot;_blank&quot;&gt;Timeless Way of Building&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Nature-Order-Phenomenon-Environmental-Structure/dp/0972652914/&quot;&gt;The Nature of Order, by Christopher Alexander&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ryan Singer on the web&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[Blog] &lt;a href=&quot;http://feltpresence.com/&quot; target=&quot;_blank&quot;&gt;Ryan Singer's blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[Video] &lt;a href=&quot;https://peepcode.com/products/ryan-singer-ux&quot; target=&quot;_blank&quot;&gt;UX Sketching on Peepcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[Video] &lt;a href=&quot;http://vimeo.com/10875362&quot; target=&quot;_blank&quot;&gt;Designing with forces, How to apply Christopher Alexander in everyday work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ryan Singer on Twitter: &lt;a href=&quot;https://twitter.com/rjs&quot; target=&quot;_blank&quot;&gt;@rjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Ryan Singer of 37signals came to Starter School to talk to us about how to think about design and product development.</summary></entry><entry><title type="html">How to customise your shell prompt</title><link href="http://localhost:4000/how-to-customise-your-shell-prompt/" rel="alternate" type="text/html" title="How to customise your shell prompt" /><published>2013-10-25T10:51:42+01:00</published><updated>2013-10-25T10:51:42+01:00</updated><id>http://localhost:4000/how-to-customise-your-shell-prompt</id><content type="html" xml:base="http://localhost:4000/how-to-customise-your-shell-prompt/">&lt;p&gt;By default, the shell prompt on Mac OS X is somewhat cluttered so I customised it to be nice and minimalistic.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open your terminal&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open your bash profile: &lt;code class=&quot;highlighter-rouge&quot;&gt;vim .bash_profile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your bash profile file, add the following on a new line: &lt;code class=&quot;highlighter-rouge&quot;&gt;export PS1=&quot;\$ \w: &quot;&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;\w&lt;/code&gt; gives the Current working directory. If you are not root, &lt;code class=&quot;highlighter-rouge&quot;&gt;\$&lt;/code&gt; inserts a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;. If you are logged in as root, you get a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Logout from your Mac’s user session and log back in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Terminal.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And &lt;em&gt;voilà&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/shell-prompt.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More on how to further &lt;a href=&quot;http://www.ibm.com/developerworks/linux/library/l-tip-prompt/&quot; target=&quot;_blank&quot;&gt;customise your shell prompt&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">By default, the shell prompt on Mac OS X is somewhat cluttered so I customised it to be nice and minimalistic.</summary></entry></feed>